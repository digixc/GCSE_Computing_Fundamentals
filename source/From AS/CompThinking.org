#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <linhhhk href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+OPTIONS: f:nil author:hhhnil num:1 creator:nil timestamp:nil 
#+TITLE: Computational Thinking
#+AUTHOR: Alex Smith and Steve Fone

#+BEGIN_HTML
<div class=ribbon>
<a href="https://github.com/MarcScott/GCSE-CS">Fork me on GitHub</a>
</div>
#+END_HTML

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:


* Decomposition
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It: Decomposition
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

/Let's break it down!/

- *Decomposition* is the process of breaking a problem down into smaller problems which can be solved much easier

- It is one of the /four cornerstones/ of *Computational Thinking*

- Think of it like being faced with a *15ft wall*. It's unrealistic to think you could just jump/climb to the top.

- However, if we break that wall down into *15 1ft tall steps*, we can tackle one step at a time to make it to the top. 

file:img/Decompositionexample.png

/Checkmate../

- Let's think of another example... /Chess!/.

- If we were going to create a program for a chess game, it'd seem quite daunting at first.

- However, if we *Decompose* the problem, we see the individual problems within a chess game.

file:img/Chessgameexample1.png

- Starting with just /"chess game"/ we can *Decompose* it into 5 problems which are easier to solve.

- But this can be *Decomposed* even further...

file:img/Chessgameexample2.png

- This is now much easier to understand and can be used to create a *flowchart* or *pseudocode*.

** Badge It: Rock...Paper...Scisssors!
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
*Silver*
/Upload to Algorithms - Decomposition: Silver on BourneToLearn/

- *Decompose* the game of Rock Paper Scissors

- You can do this as a *numbered list* or *bullet pointed list*

*Gold*
/Upload to Algorithms - Decomposition: Gold on BourneToLearn/

- Use your silver *decomposition* to create a *flowchart*

file:img/Flowchartsymbols.png

- /Make sure you use the correct symbols!/

*Platinum*
/Upload to Algorithms - Decomposition: Platinum on BourneToLearn/

- Using your *numbered list* or *bullet pointed list* and *flowchart*, write the solution in *Python*

#+BEGIN_HTML
<iframe src="https://trinket.io/embed/python/9048a87ff8" width="100%" 
height="600" frameborder="0" marginwidth="0" marginheight="0" 
allowfullscreen></iframe>
#+END_HTML


* Abstraction
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It: Abstraction
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

- *Abstraction* is the process of removing unneccesary details until all that remains is
   what is needed to solve the problem

- It is also one of the /four cornerstones/ of *Computational Thinking*

- We use this to make the problem *more simple* but also consiquently *less realistic*

- Watch the video below and see if you can spot how *Abstraction* is used

#+BEGIN_HTML
<iframe width="659" height="494" src="https://www.youtube.com/embed/Bg3pfUqdLp4" 
frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
#+END_HTML

** Badge It: Definition & Classroom Example
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

/Task - Gold/

- Perform *Abstraction* on this classroom

- Think about what details can be *Abstracted*

- Do we need the walls? chairs? keyboards? Think about the seating plan as an example

- Produce an *Abstracted* image of the classroom (Paint/Word/PowerPoint)

* Pattern Recognition
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It: Pattern Recognition
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

- *Pattern Recognition* is something we all do everyday.

- It is also one of the /four cornerstones/ of *Computational Thinking*

- Without being told, we can find patterns in data.

- For example, a set of numbers *2, 4, 8, 16, 32, 64*.

- Can you guess what the next number will be?

- ...

- ...

- ...

- /Ping!/

- That's right! *124*!

- We can assume that the next number will be *124* because we *recognise* the *pattern* of /squaring 2/.

- /This pattern also relates to/ *Binary*

** Try It: Illusion Example
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

/Old or Young Woman?/

- Can you see a *Pattern* in this image?
 
- Some people see a *young* woman, some see an *old* woman
file:img/patternrecog.png
- This is to do with how our /brain/ automatically *recognises patterns* in pictures we look at

