#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil 
#+TITLE: Computational Thinking 2
#+AUTHOR: Alex Smith

#+BEGIN_HTML
<div class=ribbon>
<a href="https://github.com/MarcScott/GCSE-CS">Fork me on GitHub</a>
</div>
#+END_HTML

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Decomposition
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It: Decomposition
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

- *Decomposition* is the process of breaking a problem down in to smaller problems

- It is also one of the four cornerstones of *Computational Thinking*

- It is used very often in conjunction with *Abstraction*

- Use *Abstraction* to remove unnecessary details, and *Decomposition* to then break the problem down in to more managable chunks

- When performing *Decomposition* you look at a problem and ask "Can I solve it in one go?"

- If you can't, then you break it down in to sub-problems. 

- This will repeat until *all tasks* can be solved in *one go (step/operation)*.
** Learn It: Decomposition Example
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

/Rock, Paper, Pseudocode!/

- For a game of *Rock, Paper, Scissors* where do we start?

- Well we always have a count-in *(Rock...Paper...Scissors!)*

- So this would be the first *step*

#+BEGIN_SRC
OUTPUT("Rock...Paper....Scissors!")
#+END_SRC

- We would then show either *Rock, Paper or Scissors*

- This would be the second *step*

#+BEGIN_SRC
OUTPUT("Rock...Paper....Scissors!")

StrPlayer1 <- USERINPUT("What does Player 1 show?")
StrPlayer2 <- USERINPUT("What does Player 2 show?")
#+END_SRC

- We would then need to compare this to the other person

- *but* this could be broken down further...What if *Rock and Paper*?

- This would be the third *step*

#+BEGIN_SRC
OUTPUT("Rock...Paper....Scissors!")

StrPlayer1 <- USERINPUT("What does Player 1 show?")
StrPlayer2 <- USERINPUT("What does Player 2 show?")

IF StrPlayer1 = "Rock" THEN
    IF Strplayer2 = "Paper" THEN
 
#+END_SRC

- What if *Rock and Rock*?

- This would be the fourth *step*

#+BEGIN_SRC
OUTPUT("Rock...Paper....Scissors!")

StrPlayer1 <- USERINPUT("What does Player 1 show?")
StrPlayer2 <- USERINPUT("What does Player 2 show?")

IF StrPlayer1 = "Rock" THEN
    IF StrPlayer2 = "Paper" THEN
       
    ELSE IF StrPlayer2 = "Rock" THEN
    
#+END_SRC

- What if *Rock and Scissors*?

- This would be the fifth *step*

#+BEGIN_SRC
OUTPUT("Rock...Paper....Scissors!")

StrPlayer1 <- USERINPUT("What does Player 1 show?")
StrPlayer2 <- USERINPUT("What does Player 2 show?")

IF StrPlayer1 = "Rock" THEN
    IF StrPlayer2 = "Paper" THEN
       
    ELSE IF StrPlayer2 = "Rock" THEN
    
    ELSE IF StrPlayer2 = "Scissors" THEN
        
#+END_SRC

- This would also be repeated for *Paper and Scissors*

#+BEGIN_SRC
OUTPUT("Rock...Paper....Scissors!")

StrPlayer1 <- USERINPUT("What does Player 1 show?")
StrPlayer2 <- USERINPUT("What does Player 2 show?")

IF StrPlayer1 = "Rock" THEN
    IF StrPlayer2 = "Paper" THEN
       
    ELSE IF StrPlayer2 = "Rock" THEN
    
    ELSE IF StrPlayer2 = "Scissors" THEN
       

IF StrPlayer1 = "Paper" THEN
    IF StrPlayer2 = "Scissors" THEN
       
    ELSE IF StrPlayer2 = "Paper" THEN
       
    ELSE IF StrPlayer2 = "Rock" THEN
        

IF StrPlayer1 = "Scissors":
    IF StrPlayer2 = "Rock":
    
    ELSE IF StrPlayer2 = "Scissors":
        
    ELSE IF StrPlayer2 = "Paper":
        
#+END_SRC

- We would then need to state who *won*

- This would be the final *step*

#+BEGIN_SRC
OUTPUT("Rock...Paper....Scissors!")

StrPlayer1 <- USERINPUT("What does Player 1 show?")
StrPlayer2 <- USERINPUT("What does Player 2 show?")

IF StrPlayer1 == "Rock" THEN
    IF StrPlayer2 = "Paper" THEN
       OUTPUT ("Player 2 Wins!)
    ELSE IF StrPlayer2 = "Rock" THEN
       OUTPUT ("It's a Draw!")
    ELSE IF StrPlayer2 = "Scissors" THEN
       OUTPUT ("Player 1 Wins!")

IF StrPlayer1 == "Paper" THEN
    IF StrPlayer2 = "Scissors" THEN
       OUTPUT ("Player 2 Wins!)
    ELSE IF StrPlayer2 = "Paper" THEN
       OUTPUT ("It's a Draw!)"
    ELSE IF StrPlayer2 = "Rock" THEN
        OUTPUT ("Player 1 Wins!)

IF StrPlayer1 = "Scissors":
    IF StrPlayer2 = "Rock":
        OUTPUT ("Player 2 Wins!")
    ELSE IF StrPlayer2 = "Scissors":
        OUTPUT ("It's a Draw!")
    ELSE IF StrPlayer2 = "Paper":
        OUTPUT ("Player 1 Wins!")
#+END_SRC

** Try It: Daily Routine Example
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

*Alarm*, /Wake up, Go back to sleep,/ *Alarm*, /Wake up, Go Back to sleep.../

- Can you perform *Decomposition* on getting ready in the morning? 

- The *goal* is to be *ready* for *school*.

- From your *alarm* going off, what *steps* do you take to get ready for *school*?

- Write the *steps* down in *order* from *waking up* to *leaving to go to school*

- Use *Pseudocode* (example above)

** Learn It: Flowcharts
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

/Go with the flow/

- We use *Flowcharts* extensively within *Computer Science*

- They allow us to easily *represent decomposition*

- They are made up of *symbols* and *arrows*

- Each symbol in a *Flowchart* relates to a *decomposed step*

- The *arrows* indicate the next *symbol (step)*

- The four main *symbols* are: *start/end*, *input/output*, *decision* and *process*

file:img/flowchart1.png

- This is an example of these *symbols* used to *calculate the area of a rectangle*

file:img/flowchart2.png

1. We begin with the *start/end symbol* which lets /anyone/ reading know where to *start*

2. This is followed by an *input/output* as we *receive* the *length* as an *input* 

3. We also receieve the *width* as an *input* so we have another *input/output symbol*

4. Next we have a *process* which *calcualates* the *area* using the *inputs*

5. The result of this *calculation (area)* is then *output* so we use the *input/output symbol*   

6. That was the final *step* so we can now use the *start/end* symbol to *terminate* 


- We can also use the *decision* symbol to create *loops* or *iterate* in a *Flowchart*

- Can you work out what this *Flowchart* does?

file:img/flowchart3.png

1. The *decision symbol* "Value >=10" has two different *next steps*

1. Value >= 10
  - If the result of the *decision* is *no*, it will go back to *input* after *outputting* "Outside Acceptable range"
  - If the result of the *decision* is *yes*, it will go another *decision* "Value <= 20"

2. Value <= 20
  - This will again *output* "Outside Acceptable Range" if the result is *no*
  - But this time, if the result is *yes*, it will go to a new *output*, "Acceptable range"

3. This is the final step before the *end* symbol which again, *terminates* the *Flowchart*

** Try It: Flowcharts
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

/Step 1: Get Ice Cream, Step 2: Sell Ice Cream, Step 3: ???, Step 4: Profit!/

- An Ice Cream seller wants to calculate how much money they have collected at the end of the day

- Using the same *symbols* we did above, see if you can represent this as a *Flowchart*

- Assuming all the Ice Creams cost the same, what inputs/outputs would you have?

- What calculations would you need to perform?

- Would you need a decision symbol?

- You can create the *symbols* using *Word/PowerPoint* (Insert -> Shapes)

** Badge It:
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

/Upload a screenshot/

- *Silver*: Attach a screenshot of your *Daily Routine*

- *Gold*: Attach a screenshot of your *Flowchart*

- *Platinum*: Complete another *Pseudocode Decomposition* of your choice and create a *Flowchart* to go with it
 
